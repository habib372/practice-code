
###########  Digital Ocean setup  #########

####=========== install apache2  ===========####
ssh root@159.79.65.21
yes
password
apt-get update && apt-get upgrade
y
sudo apt-get install apache2
y
sudo apt-get install mysql-server

sudo apt-get update

sudo apt-get install php libapache2-mod-php php-mysql php-xml php-mbstring php-curl php-zip
y

sudo systemctl restart apache2

apt-get install phpmyadmin
y > ok > yes > ok

service apache2 restart

sudo ln -s /etc/phpmyadmin/apache.conf /etc/apache2/conf-available/phpmyadmin.conf

sudo a2enconf phpmyadmin.conf

sudo service apache2 reload


---------------------------
## server website configration for redirect::
---------------------------

sudo a2enmod rewrite
sudo systemctl restart apache2

Edit the Apache configuration file (e.g., /etc/apache2/sites-available/your-domain.conf)
ServerName example.com
ServerAlias www.example.com
ServerAdmin webmaster@localhost
DocumentRoot /var/www/example.com/public

sudo systemctl restart apache2

sudo chown -R www-data:www-data /var/www/your-laravel-project
sudo chmod -R 755 /var/www/your-laravel-project
sudo chown -R www-data:www-data /var/www/html
sudo chmod -R 755 /var/www/html

cache clear korte hobe

Edit the Apache configuration file to set the ServerName directive globally to suppress the warning. Open /etc/apache2/apache2.conf and add:
ServerName your-domain.com
<Directory /var/www/>
	Options Indexes FollowSymLinks
	AllowOverride All
	Require all granted
</Directory>

sudo systemctl restart apache2

sudo a2ensite example.com.conf
sudo systemctl reload apache2


####=========== install mysql ===========####
sudo apt update
sudo apt install mysql-server

start mysql: 	sudo systemctl start mysql
restart mysql:  sudo systemctl restart mysql
status check: 	sudo systemctl status mysql


####=========== Out-Of-Memory (OOM) kill error solved: ===========####
The oom-kill error indicates that the MySQL server was killed by the system's Out-Of-Memory (OOM) killer due to insufficient memory. This is a common issue on systems with low memory resources, like your Droplet with 512MB of RAM.

Here are some steps to address this:

1. Add Swap Space
sudo fallocate -l 1G /swapfile
sudo chmod 600 /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
sudo sh -c 'echo "/swapfile swap swap defaults 0 0" >> /etc/fstab'

2. Reduce MySQL Memory Usage
Optimize MySQL to use less memory by adjusting its configuration. Edit the MySQL configuration file (/etc/mysql/my.cnf or /etc/mysql/mysql.conf.d/mysqld.cnf) and add or modify the following settings:
mysqld.cnf::
[mysqld]
innodb_buffer_pool_size = 128M
innodb_log_file_size = 32M
max_connections = 50
table_open_cache = 200
key_buffer_size = 16M
thread_cache_size = 8

sudo systemctl restart mysql
sudo systemctl status mysql


####=========== export and import existing database: ===========####
**export databse::
mysqldump -u your_local_user -p your_local_database > /var/www/database_export.sql

**import database::
mysql -u your_db_user -h your_digitalocean_db_host -P port_number -p your_db_name < /path/to/your_database.sql


####=========== example ===========####
export:  mysqldump -u example_db_user -p example_db > /var/www/database_export.sql

import:  mysql -u example_db_user -h db-mysql-sgp2-36581-do-user-36528749-0.c.db.ondigitalocean.com -P 10560 -p example_db < /var/www/example_db.sql



####=========== ERROR SOLVE ===========####
error: Can't write image data to path (/var/www/example.com/public/images/photo/imgage.png)

solution:  sudo chown -R www-data:www-data /var/www/example.com/public/images/photo/
           sudo chmod -R 755 /var/www/example.com/public/uploads/outside_visit_attachments/


####=========== Make file or folder ===========####
make folder:  mkdir -p /var/www/example.com/public/images/folder_name/


####=========== composer install and phpcli:: ===========####
ssh root@your_droplet_ip

sudo apt update

sudo apt install php-cli unzip

cd ~

php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"

php -r "if (hash_file('sha384', 'composer-setup.php') === '906a13624044b147ff8b322b6742e5f2b5b60b48af40b98d07b340ca6acdc17d36cdd5e2adf1e08dd772bae90a377a2b') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"

sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer

php -r "unlink('composer-setup.php');"

composer --version

cd /var/www/website_path

composer update or install package same as composer require stripe/stripe-php or any php command


----------------
cd /var/www/website_path   --for direct access.


####========== Run Cronjob: ===========####
cd /var/www/website_path
crontab -e
* * * * * php /var/www/website_path/artisan schedule:run >> /dev/null 2>&1


##=========== check all folder::============
ls -d /var/www/*/
--or--
ls -la /var/www/


##=========== Password Authentication::============
nano /etc/ssh/sshd_config
PasswordAuthentication yes
Y > Enter
nano /etc/ssh/sshd_config
PasswordAuthentication no = PasswordAuthentication yes



sudo mkdir /var/www/lifelinkmedicalgroup



###======apache install======##

check installor not:
---------
apache2 -v


1. Install Apache::
---------
sudo apt update
sudo apt install apache2

2. Enable and start Apache:
---------
sudo systemctl enable apache2
sudo systemctl start apache2

3. Install PHP and Required Extensions:
---------
sudo apt install php libapache2-mod-php php-mysql php-curl php-json php-mbstring php-xml php-zip php-bcmath php-tokenizer php-pear php-dev

4.Restart Apache after installation:
---------
sudo systemctl restart apache2

5. Install Composer:
---------
curl -sS https://getcomposer.org/installer | php
sudo mv composer.phar /usr/local/bin/composer

6. Deploy the Laravel Application
---------
cd /var/www
sudo composer create-project --prefer-dist laravel/laravel lifelinkmedicalgroup

7.Set the correct permissions:
---------
sudo chown -R www-data:www-data /var/www/lifelinkmedicalgroup
sudo chmod -R 755 /var/www/lifelinkmedicalgroup
sudo chmod -R 755 /var/www/lifelinkmedicalgroup/storage
sudo chmod -R 755 /var/www/lifelinkmedicalgroup/bootstrap/cache

8.Create a New Virtual Host for Laravel:
---------
sudo nano /etc/apache2/sites-available/lifelinkmedicalgroup.conf

9.Add the following configuration:
---------
<VirtualHost *:80>
    ServerAdmin admin@lifelinkmedicalgroup.com
    ServerName lifelinkmedicalgroup.com
    DocumentRoot /var/www/lifelinkmedicalgroup/public

    <Directory /var/www/lifelinkmedicalgroup/public>
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>


10.Enable the Laravel Site:
---------
sudo a2ensite lifelinkmedicalgroup.conf

11.Reload Apache:
---------
sudo systemctl reload apache2

12. Configure .env File:
---------
sudo nano /var/www/lifelinkmedicalgroup/.env
Set the APP_URL, database credentials, and other required configurations.

13. Set Up DNS:
-------------
Ensure that your domain (e.g., lifelinkmedicalgroup.com) points to your DigitalOcean droplet's IP address. You can configure this in your domain registrar's DNS settings.

14. Test the Setup:
-------------
http://your_domain.com



1. Optional: Secure with SSL:
--------
sudo apt install certbot python3-certbot-apache
sudo certbot --apache -d lifelinkmedicalgroup.com

2. Verify Both Sites:
---------
WordPress: http://your-droplet-ip (or your WordPress domain)
Laravel: http://lifelinkmedicalgroup.com

Both sites should now be accessible.